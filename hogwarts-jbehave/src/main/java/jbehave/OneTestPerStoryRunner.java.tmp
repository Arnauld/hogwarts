package jbehave;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.runner.Runner;
import org.junit.runner.notification.RunNotifier;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.junit.runners.Suite;
import org.junit.runners.model.FrameworkMethod;
import org.junit.runners.model.InitializationError;
import org.junit.runners.model.TestClass;

public class OneTestPerStoryRunner extends Suite {
    
    /**
     * Annotation for a method which provides parameters to be injected 
     * into the test class constructor.
     */
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.METHOD)
    public static @interface Stories {
    }
    
    private final List<Runner> runners = new ArrayList<Runner>();

    /**
     * Only called reflectively. Do not use programmatically.
     */
    public OneTestPerStoryRunner(Class<?> klass) throws Throwable {
        super(klass, Collections.<Runner> emptyList());
        for (String storyPath : storyPaths(getTestClass())) {
            runners.add(new TestClassRunnerForParameters(getTestClass().getJavaClass(), storyPath));
        }
    }
    
    private List<String> storyPaths(TestClass klass) throws Throwable {
        return (List<String>) getParametersMethod(klass).invokeExplosively(null);
    }

    private FrameworkMethod getParametersMethod(TestClass testClass) throws Exception {
        List<FrameworkMethod> methods = testClass.getAnnotatedMethods(Stories.class);
        for (FrameworkMethod each : methods) {
            int modifiers = each.getMethod().getModifiers();
            if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {
                return each;
            }
        }

        throw new Exception("No public static parameters method on class " + testClass.getName());
    }
    
    // ~~~
    
    private class TestClassRunnerForParameters extends BlockJUnit4ClassRunner {
        private final String storyPath;

        TestClassRunnerForParameters(Class<?> type, String storyPath) throws InitializationError {
            super(type);
            this.storyPath = storyPath;
        }

        @Override
        public Object createTest() throws Exception {
            return getTestClass().getOnlyConstructor().newInstance(computeParams());
        }

        private Object[] computeParams() throws Exception {
            try {
                return fDataProvider.dataAt(fDataProviderIndex);
            }
            catch (ClassCastException e) {
                throw new Exception(String.format("%s.%s() must return a Collection of arrays.", getTestClass()
                        .getName(), getParametersMethod(getTestClass()).getName()));
            }
        }

        @Override
        protected String getName() {
            return fDataProvider.nameAt(fDataProviderIndex);
        }

        @Override
        protected String testName(final FrameworkMethod method) {
            return method.getName() + " [" + getName() + "]";
        }

        @Override
        protected void validateZeroArgConstructor(List<Throwable> errors) {
            // constructor can, nay, should have args.
        }

        @Override
        protected Statement classBlock(RunNotifier notifier) {
            return childrenInvoker(notifier);
        }
    }

}
